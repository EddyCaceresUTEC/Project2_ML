import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.neighbors import NearestNeighbors
from sklearn.cluster import KMeans
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
import re
import os

# =======================
# CARGA DE DATOS
# =======================
# Leer X_lda desde el archivo TXT
X_lda = np.loadtxt("X_lda.txt", delimiter=",", skiprows=1)  # Saltar la fila del encabezado
merged_df = pd.read_csv("merged_df_filtrado.csv")

merged_df["imdbId"] = merged_df["imdbId"].astype(str)
# Convertir valores no num√©ricos a NaN
merged_df["movieId"] = pd.to_numeric(merged_df["movieId"], errors="coerce")

# Reemplazar NaN con un valor v√°lido (por ejemplo, 0)
merged_df["movieId"] = merged_df["movieId"].fillna(0).astype(float).astype(int).astype(str)

# =======================
# a) B√öSQUEDA POR SIMILITUD VISUAL
# =======================
# Buscar pel√≠culas similares a una pel√≠cula con un imdbId espec√≠fico
def buscar_similares(id, n=5, metodo="imdbId"):
    """
    Busca pel√≠culas similares a una dada basada en su imdbId o movieId.
    :param id: El identificador de la pel√≠cula (imdbId o movieId).
    :param n: N√∫mero de pel√≠culas similares a devolver.
    :param metodo: M√©todo de b√∫squeda ("imdbId" o "movieId").
    :return: DataFrame con las pel√≠culas similares.
    """
    if metodo not in ["imdbId", "movieId"]:
        raise ValueError("El m√©todo de b√∫squeda debe ser 'imdbId' o 'movieId'.")
    index_pelicula = merged_df[merged_df[metodo] == str(id)].index[0]
    nn = NearestNeighbors(n_neighbors=n+1).fit(X_lda)
    dists, idxs = nn.kneighbors([X_lda[index_pelicula]])
    columnas_necesarias = ["Title", "Genre", "Year", "Poster"]
    return merged_df.iloc[idxs[0][1:]][columnas_necesarias]

def filtrar_peliculas(genero=None, anio=None):
    df = merged_df.copy()
    if genero:
        df = df[df["Genre"].str.contains(genero, case=False, na=False)]
    if anio:
        df = df[df["Year"] == str(anio)]  # Filtrar por a√±o como string
    columnas = ["Title", "Genre", "Poster", "cluster", "x", "y", "Year", "imdbId", "movieId"]
    return df[columnas]

# =======================
# STREAMLIT APP
# =======================
st.set_page_config(page_title="Recomendador de Pel√≠culas", layout="centered")

# Inicializar variables en st.session_state
if "pagina_actual" not in st.session_state:
    st.session_state.pagina_actual = 1

if "mostrar_recomendaciones" not in st.session_state:
    st.session_state.mostrar_recomendaciones = False

if "pelicula_seleccionada" not in st.session_state:
    st.session_state.pelicula_seleccionada = None

# T√≠tulo centrado y en rojo
st.markdown(
    """
    <h1 style="text-align: center; color: red; font-weight: bold;">
         Movies Plus
    </h1>
    """,
    unsafe_allow_html=True
)

# Texto m√°s grande y en negrita
if not st.session_state.mostrar_recomendaciones:
    st.markdown(
        """
        <h2 style="text-align: center; color: black; font-weight: bold;">
            üé¨ Cat√°logo completo de pel√≠culas
        </h2>
        """,
        unsafe_allow_html=True
    )

    # =======================
    # FILTROS
    # =======================
    # Extraer g√©neros √∫nicos
    generos_unicos = set()
    merged_df["Genre"].dropna().apply(lambda x: generos_unicos.update(x.split("|")))
    generos_unicos = sorted(generos_unicos)

    # Selecci√≥n de g√©nero
    genero_seleccionado = st.selectbox(
        "Filtrar por g√©nero:",
        options=["Todos"] + generos_unicos,
        index=0
    )

    # Selecci√≥n de a√±o
    anio_seleccionado = st.selectbox(
        "Filtrar por a√±o:",
        options=["Todos"] + sorted(merged_df["Year"].dropna().unique()),
        index=0
    )

    # Aplicar filtros
    if genero_seleccionado != "Todos" or anio_seleccionado != "Todos":
        catalogo_filtrado = filtrar_peliculas(
            genero=genero_seleccionado if genero_seleccionado != "Todos" else None,
            anio=anio_seleccionado if anio_seleccionado != "Todos" else None
        )
    else:
        catalogo_filtrado = merged_df

    # =======================
    # PAGINACI√ìN
    # =======================
    # N√∫mero de p√≥sters por p√°gina
    POSTERS_POR_PAGINA = 20

    # Botones para cambiar de p√°gina
    col1, col2 = st.columns([4, 1])  # Ajustar proporci√≥n de columnas para mover el bot√≥n hacia la izquierda
    with col1:
        if st.button("‚¨ÖÔ∏è Anterior"):
            st.session_state.pagina_actual = max(1, st.session_state.pagina_actual - 1)
    with col2:
        if st.button("‚û°Ô∏è Siguiente"):
            st.session_state.pagina_actual += 1

    # Calcular el rango de pel√≠culas a mostrar seg√∫n la p√°gina actual
    inicio = (st.session_state.pagina_actual - 1) * POSTERS_POR_PAGINA
    fin = inicio + POSTERS_POR_PAGINA
    catalogo_pagina = catalogo_filtrado.iloc[inicio:fin]

    # Mostrar texto de la p√°gina centrado encima de las pel√≠culas
    st.markdown(
        f"""
        <div style="text-align: center; font-size: 24px; font-weight: bold; color: black; margin-bottom: 20px;">
            P√°gina {st.session_state.pagina_actual}
        </div>
        """,
        unsafe_allow_html=True
    )

    # Mostrar p√≥sters de la p√°gina actual con botones debajo
    cols = st.columns(5)
    for idx, (title, genre, poster, imdbId) in enumerate(catalogo_pagina[["Title", "Genre", "Poster", "imdbId"]].values):
        with cols[idx % 5]:
            st.image(poster, width=120, caption=f"{title}")
            st.write(f"G√©nero: {genre}")
            
            # Bot√≥n para ver recomendaciones
            if st.button(f"Ver similares", key=f"recomendaciones_{imdbId}"):
                st.session_state.mostrar_recomendaciones = True
                st.session_state.pelicula_seleccionada = imdbId

    # =======================
    # TOP 10 PEL√çCULAS POR CLUSTER
    # =======================
    st.markdown(
        """
        <h2 style="text-align: center; color: black; font-weight: bold;">
            üîù Top Pel√≠culas Representativas por Cluster
        </h2>
        """,
        unsafe_allow_html=True
    )

    # Selecci√≥n de cluster
    clusters_unicos = sorted(merged_df["cluster"].dropna().unique())
    cluster_seleccionado = st.selectbox(
        "Selecciona un cluster:",
        options=clusters_unicos,
        index=0
    )

    # Mostrar el top 10 de pel√≠culas del cluster seleccionado
    peliculas_cluster = merged_df[merged_df["cluster"] == cluster_seleccionado].head(10)  # Seleccionar las primeras 10 pel√≠culas
    cols = st.columns(5)
    for idx, (title, genre, year, poster) in enumerate(peliculas_cluster[["Title", "Genre", "Year", "Poster"]].values):
        with cols[idx % 5]:
            st.image(poster, width=120, caption=f"{title} ({year})")
            st.write(f"G√©nero: {genre}")

else:
    # Mostrar recomendaciones si se seleccion√≥ una pel√≠cula
    pelicula_seleccionada = merged_df[merged_df["imdbId"] == st.session_state.pelicula_seleccionada]
    if not pelicula_seleccionada.empty:
        st.markdown(
            """
            <h2 style="text-align: center; color: blue; font-weight: bold;">
                üé• Pel√≠cula seleccionada
            </h2>
            """,
            unsafe_allow_html=True
        )
        poster = pelicula_seleccionada.iloc[0]["Poster"]
        title = pelicula_seleccionada.iloc[0]["Title"]
        year = pelicula_seleccionada.iloc[0]["Year"]
        genre = pelicula_seleccionada.iloc[0]["Genre"]

        # Mostrar la pel√≠cula seleccionada centrada
        st.markdown(
            f"""
            <div style="text-align: center; margin-bottom: 20px;">
                <img src="{poster}" alt="{title}" style="width: 300px; border-radius: 10px;">
                <h3 style="color: black; font-weight: bold;">{title} ({year})</h3>
                <p style="color: gray; font-size: 18px;">G√©nero: {genre}</p>
            </div>
            """,
            unsafe_allow_html=True
        )

    # Mostrar las recomendaciones debajo
    st.markdown(
        """
        <h2 style="text-align: center; color: green; font-weight: bold;">
            Recomendaciones
        </h2>
        """,
        unsafe_allow_html=True
    )
    recomendaciones = buscar_similares(st.session_state.pelicula_seleccionada, n=15, metodo="imdbId")
    cols = st.columns(5)
    for idx, (title, genre, year, poster) in enumerate(recomendaciones.values):
        with cols[idx % 5]:
            st.image(poster, width=120, caption=f"{title} ({year})")
            st.write(f"G√©nero: {genre}")

    # Bot√≥n para regresar a la p√°gina principal
    if st.button("Volver al cat√°logo"):
        st.session_state.mostrar_recomendaciones = False
        st.session_state.pelicula_seleccionada = None
